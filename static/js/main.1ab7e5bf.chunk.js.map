{"version":3,"sources":["Map/Map.js","BudgetComparison/BudgetComparison.tsx","PoliceToCivilianRatio/PoliceToCivilianRatio.tsx","BudgetPerCapita/BudgetPerCapita.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Map","onMouseover","selectedCity","d3Container","useRef","isSmallScreen","useMediaQuery","useEffect","svgContainer","d3","current","select","path","append","attr","topojson","statesOutline","objects","nation","style","states","nodes","selectAll","data","citiesData","enter","d","Index","toString","cx","cy","on","i","this","classList","contains","cityNames","labelx","labely","text","City","className","ref","preserveAspectRatio","viewBox","height","width","BudgetComparison","isMediumScreen","numberWithCommas","n","replace","policingBudget","overall_policing_budget","percentPolicingBudget","percent_city_funds_spent_on_policing","totalBudget","otherBudget","Math","round","policingBudgetString","otherBudgetString","policingBudgetInWords","stringifiedReversed","split","reverse","costInWords","digitToStartAt","length","findCostInWords","budgetToPixels","domain","range","curvyArrowHeight","arrowHeight","id","offset","stopColor","curvyArrowWidth","fill","x","y","textAnchor","text-length","href","PoliceToCivilianRatio","ratio","police_dept_employee_to_resident_ratio","prevRatio","value","usePrevious","useState","graphRendered","setGraphRendered","message","simulation","imageData","slice","alpha","restart","updateNodes","undefined","isNaN","transition","image","exit","remove","velocityDecay","alphaDecay","force","strength","radius","diameter","iterations","ticked","drag","event","call","initialGraph","BudgetPerCapita","budgetPerCapita","policing_budget_per_capita","budgetMessage","numberOfBills","Array","from","v","k","map","key","alt","src","addHundredDollarBills","App","setSelectedCity","useCallback","newCity","locationName","State","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.1ab7e5bf.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport \"./styles.css\";\nimport citiesData from \"../data/us_cities_with_FID.json\";\nimport statesOutline from \"../data/states_outline.json\";\nimport { useMediaQuery } from 'beautiful-react-hooks'; \n\n// Had to slightly change long/lat manually for some cities so they wouldn't overlap.\n// Here are the original long/lat for those cities:\n// - Fort Worth longitude: -97.4294026\n// - Dallas longitude: -96.8716261\n// - Newark latitude: 40.7313432\n// - New York latitutde 40.6976637\n// - New York longitude -74.1197639\n\nconst Map = ({ onMouseover, selectedCity }) => {\n  const d3Container = useRef(null);\n  const isSmallScreen = useMediaQuery('(max-width: 1200px)'); \n\n  useEffect(() => {\n    const svgContainer = d3.select(d3Container.current).select(\".svg-content\");\n    const path = d3.geoPath();\n\n    // add separate state and nation paths so map won't have spotty white fill\n    // nation path\n    svgContainer\n    .append(\"path\")\n    .attr(\n      \"d\",\n      path(topojson.mesh(statesOutline, statesOutline.objects.nation))\n    )\n    .style(\"fill\", \"white\")\n    .style(\"stroke\", \"gray\")\n    .style(\"stroke-width\", 0.5)\n\n    // state path\n    svgContainer\n      .append(\"path\")\n      .attr(\n        \"d\",\n        path(topojson.mesh(statesOutline, statesOutline.objects.states))\n      )\n      .style(\"fill\", \"none\")\n      .style(\"stroke\", \"gray\")\n      .style(\"stroke-width\", 0.5)\n\n    const nodes = svgContainer\n      .selectAll(\"circle\")\n      .data(citiesData)\n      .enter()\n      .append(\"circle\")\n      .attr(\"class\", (d) => \"circle-\" + d.Index.toString())\n      .attr(\"r\", 4)\n      .attr(\"cx\", (d) => d.cx)\n      .attr(\"cy\", (d) => d.cy)\n      .style(\"stroke\", \"#007a7a\")\n      .style(\"fill\", \"#007a7a\")\n      .on(\"mouseover\", function (d, i) {\n        if (!this.classList.contains(\"clicked\")) {\n          d3.select(this).style(\"fill\", \"#BD5800\").style(\"stroke\", \"black\");\n          d3.select(d3Container.current)\n            .select(\".text-\" + i.Index.toString())\n            .style(\"fill\", \"#BD5800\");\n        }\n      })\n      .on(\"mouseout\", function (d, i) {\n        if (!this.classList.contains(\"clicked\")) {\n          d3.select(this).style(\"fill\", \"#007a7a\").style(\"stroke\", \"none\");\n          d3.select(d3Container.current)\n            .select(\".text-\" + i.Index.toString())\n            .style(\"fill\", \"black\");\n        }\n      })\n      .on(\"click\", function (d, i) {\n        nodes\n          .attr(\"class\", (d) => \"circle-\" + d.Index.toString())\n          .style(\"fill\", \"#007a7a\")\n          .style(\"stroke\", \"#007a7a\");\n        cityNames\n          .attr(\"class\", (d) => \"text-\" + d.Index.toString())\n          .style(\"fill\", \"black\");\n        \n        d3.select(d3Container.current)\n          .select(\".text-\" + i.Index.toString())\n          .attr(\"class\", \"clicked\")\n          .style(\"fill\", \"#BD5800\");\n        d3.select(this)\n          .attr(\"class\", \"clicked\")\n          .style(\"fill\", \"#BD5800\")\n          .style(\"stroke\", \"black\");\n\n        onMouseover(i);\n      });\n\n    // Makes map labels draggable. \n    // Used this to determine new coordinates for labels relative to their nodes.\n    // let tempLabelCoordinates = {};\n    // const projection = d3.geoAlbersUsa().scale(1300).translate([487.5, 305]);\n    // const drag = d3.drag().on(\"drag\", function (event, d) {\n    //   const draggedLatLong = projection.invert([event.x, event.y]);\n    //   d3.select(this)\n    //     .attr(\"x\", (d.x = event.x))\n    //     .attr(\"y\", (d.y = event.y));\n    //   tempLabelCoordinates[d.City] = [draggedLatLong[1], draggedLatLong[0]];\n    //   console.log(JSON.stringify(tempLabelCoordinates))\n    // });\n\n    const cityNames = svgContainer\n      .selectAll(\"text\")\n      .data(citiesData)\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", (d) => \"text-\" + d.Index.toString())\n      .attr(\"x\", (d) => d.labelx + 3)\n      .attr(\"y\", (d) => d.labely - 3)\n      .text((d) => d.City)\n      .style(\"user-select\", \"none\")\n      .style(\"font\", \"14px futura\")\n      .style(\"cursor\", \"pointer\")\n      .on(\"mouseover\", function (d, i) {\n        if (!this.classList.contains(\"clicked\")) {\n          d3.select(this).style(\"fill\", \"#BD5800\");\n          d3.select(d3Container.current)\n            .select(\".circle-\" + i.Index.toString())\n            .style(\"fill\", \"#BD5800\")\n            .style(\"stroke\", \"black\");\n        }\n      })\n      .on(\"mouseout\", function (d, i) {\n        if (!this.classList.contains(\"clicked\")) {\n          d3.select(this).style(\"fill\", \"black\");\n          d3.select(d3Container.current)\n            .select(\".circle-\" + i.Index.toString())\n            .style(\"fill\", \"#007a7a\")\n            .style(\"stroke\", \"none\");\n        }\n      })\n      .on(\"click\", function (d, i) {\n        cityNames\n          .attr(\"class\", (d) => \"text-\" + d.Index.toString())\n          .style(\"fill\", \"black\");\n        nodes\n          .attr(\"class\", d => \"circle-\" + d.Index.toString())\n          .style(\"fill\", \"#007a7a\")\n          .style(\"stroke\", \"#007a7a\");\n      \n        d3.select(d3Container.current)\n          .select(\".circle-\" + i.Index.toString())\n          .attr(\"class\", \"clicked\")\n          .style(\"fill\", \"#BD5800\")\n          .style(\"stroke\", \"black\");\n        d3.select(this)\n          .attr(\"class\", \"clicked\")\n          .style(\"fill\", \"#BD5800\");\n\n        onMouseover(i);\n      });\n\n    // .call(drag);\n  }, [onMouseover]);\n\n  return (\n    <div className={selectedCity ? \"map small-map\" : \"map\"} ref={d3Container}>\n      <svg\n        preserveAspectRatio=\"xMidYMid meet\"\n        viewBox={isSmallScreen ? \"-80 -30 1100 650\" : \"-70 -30 1100 650\"}\n        className=\"svg-content\"\n        height=\"100%\"\n        width=\"100%\"\n      ></svg>\n    </div>\n  );\n};\nexport default Map;\n","import React from \"react\";\nimport * as d3 from \"d3\";\nimport \"./styles.css\";\nimport { City } from \"../City\";\nimport { useMediaQuery } from \"beautiful-react-hooks\";\n\nexport const BudgetComparison: React.FC<{ selectedCity: City }> = ({\n  selectedCity,\n}) => {\n  const isSmallScreen = useMediaQuery(\"(max-width: 1200px)\");\n  const isMediumScreen = useMediaQuery(\"(max-width: 1500px)\");\n\n  if (!selectedCity) {\n    return <div className=\"budget-comparison\"></div>;\n  }\n\n  const findViewBox = () => {\n    if(isSmallScreen) {\n      return \"-350 -40 1300 700\"\n    } else if (isMediumScreen) {\n      return \"-100 0 800 800\"\n    } else {\n      return \"0 0 600 600\"\n    }\n  }\n\n  const numberWithCommas = (n: number) => {\n    return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n\n  const findCostInWords = (n: number) => {\n    const stringifiedReversed = n.toString().split(\"\").reverse();\n    const numOfDigits = stringifiedReversed.length;\n    let costInWords = \"\";\n    let digitToStartAt = null;\n    if (numOfDigits <= 9) {\n      costInWords = \" million dollars\"\n      digitToStartAt = 6\n    } else {\n      costInWords = \" billion dollars\"\n      digitToStartAt = 9\n    }\n    for (var i = digitToStartAt; i < stringifiedReversed.length; i++) {\n      costInWords = stringifiedReversed[i].toString() + costInWords\n    }\n    return costInWords;\n  };\n\n  const policingBudget = selectedCity.overall_policing_budget;\n  const percentPolicingBudget =\n    selectedCity.percent_city_funds_spent_on_policing;\n  const totalBudget = (policingBudget * 100) / percentPolicingBudget;\n  const otherBudget = Math.round(totalBudget - policingBudget);\n  const policingBudgetString = \"$\" + numberWithCommas(policingBudget);\n  const otherBudgetString = \"$\" + numberWithCommas(otherBudget);\n  const policingBudgetInWords = findCostInWords(policingBudget)\n\n  const budgetToPixels = d3\n    .scaleLinear()\n    .domain([1, totalBudget])\n    .range([30, 150]); // values chosen so that text can fit comfortably inside both arrows\n\n  // keep this greater than 400px so the curve paths can still look good\n  const curvyArrowWidth = 500;\n  const curvyArrowHeight = budgetToPixels(policingBudget);\n  const arrowWidth = 600;\n  const arrowHeight = budgetToPixels(otherBudget);\n  const gapBetweenArrows = 0;\n  const arrowsStartY = 60;\n\n  const createPolicingBudgetArrow = () => {\n    const path =\n      // move to x = 0, y = below the Other budget arrow (+ 5 for spacing for now)\n      `M 0 ${arrowHeight + gapBetweenArrows + arrowsStartY}` +\n      // top horizontal line\n      ` H  ${curvyArrowWidth * 0.6}` +\n      // top curve\n      ` C ${curvyArrowWidth * 0.9} ${\n        arrowHeight + gapBetweenArrows + arrowsStartY\n      }  \n          ${curvyArrowWidth * 0.9} ${arrowHeight + arrowsStartY + 120}   \n          ${curvyArrowWidth * 0.9} ${arrowHeight + arrowsStartY + 150}` +\n      // these two Ls are the arrow pointing part\n      ` L ${curvyArrowWidth * 0.9 - curvyArrowHeight / 2} \n          ${arrowHeight + arrowsStartY + curvyArrowHeight / 2 + 150}\n        L ${curvyArrowWidth * 0.9 - curvyArrowHeight} ${\n        arrowHeight + arrowsStartY + 150\n      }` +\n      // bottom curve\n      ` C ${curvyArrowWidth * 0.9 - curvyArrowHeight} ${\n        arrowHeight + arrowsStartY + 120\n      }\n        ${curvyArrowWidth * 0.9 - curvyArrowHeight} ${\n        arrowHeight + curvyArrowHeight + gapBetweenArrows + arrowsStartY\n      }\n        ${curvyArrowWidth * 0.6} ${\n        arrowHeight + curvyArrowHeight + gapBetweenArrows + arrowsStartY\n      }` +\n      // bottom horizontal line\n      ` H 0` +\n      // vertical line back to start of this polygon\n      ` V ${arrowHeight + gapBetweenArrows + arrowsStartY}`;\n    return path;\n  };\n\n  const createOtherBudgetArrow = () => {\n    const path =\n      // move to x = 0, y = the arrow start position\n      `M 0 ${arrowsStartY} ` +\n      // draw a horizontal line from (0, 0) to (0, arrowWidth)\n      `H ${arrowWidth} ` +\n      // these two lines draw the arrow's point\n      `L ${arrowWidth + arrowHeight / 2} ${arrowHeight / 2 + arrowsStartY} \n       L ${arrowWidth} ${arrowHeight + arrowsStartY}` +\n      // draw a horizontal line to (0, arrow start position)\n      ` H 0 V ${arrowsStartY}`;\n    return path;\n  };\n\n  const createBracket = () => {\n    const path =\n      // move to -20 units above arrows\n      `M 30 -20` +\n      // first diagonal line\n      `L -20 30` +\n      // vertical line\n      `V ${arrowHeight + curvyArrowHeight + 100}` +\n      // second horizontal line\n      `L 10 ${arrowHeight + curvyArrowHeight + 130}` +\n      // little blip horizontal line\n      `M -20 ${(arrowHeight + curvyArrowHeight + 130) / 2 - 15} H -40`;\n    return path;\n  };\n\n  return (\n    <div className=\"budget-comparison\">\n      <p className=\"budget-comparison-explainer\">\n        {isSmallScreen ? selectedCity.City : \"This city\"} spent{\" \"}\n        {policingBudgetInWords} on policing in 2019\n      </p>\n      {policingBudget && percentPolicingBudget && (\n        <svg\n          viewBox={findViewBox()}\n          preserveAspectRatio=\"xMidYMid meet\"\n          className=\"svg-arrows\"\n        >\n          <defs>\n            <linearGradient id=\"gradient\">\n              <stop offset=\"0%\" stopColor=\"#006666\" />\n              <stop offset=\"95%\" stopColor=\"aquamarine\" />\n            </linearGradient>\n          </defs>\n          <path className=\"bracket\" d={createBracket()}></path>\n          <path\n            className=\"other-budget-arrow\"\n            d={createOtherBudgetArrow()}\n          ></path>\n          <path\n            className=\"policing-budget-arrow\"\n            d={createPolicingBudgetArrow()}\n            fill=\"url(#gradient)\"\n          ></path>\n          <text\n            className=\"total-budget-text\"\n            x=\"-50\"\n            y=\"130\"\n            textAnchor=\"end\"\n            text-length=\"100\"\n          >\n            {selectedCity.City}'s\n          </text>\n          <text\n            className=\"total-budget-text\"\n            x=\"-50\"\n            y=\"165\"\n            text-length=\"100\"\n            textAnchor=\"end\"\n          >\n            total budget\n          </text>\n          <text\n            className=\"other-budget-text\"\n            x=\"0\"\n            y={arrowHeight * 0.5 + 20 + arrowsStartY}\n          >\n            {otherBudgetString}\n          </text>\n          <text\n            className=\"policing-budget-text\"\n            x=\"0\"\n            y={arrowHeight + curvyArrowHeight * 0.5 + 15 + arrowsStartY}\n          >\n            {policingBudgetString}\n          </text>\n          <text\n            className=\"everything-else-text\"\n            x={arrowWidth + arrowHeight / 2 + 10}\n            y={arrowHeight / 2 + arrowsStartY + 5}\n          >\n            everything else\n          </text>\n          <image\n            className=\"budget-comparison-officer\"\n            href=\"/policing_cost_vis/officer-large.png\"\n            x={curvyArrowWidth - curvyArrowHeight / 2 - 150}\n            y={arrowHeight + arrowsStartY + 200}\n            width=\"200\"\n            height=\"200\"\n          ></image>\n        </svg>\n      )}\n    </div>\n  );\n};\n\nexport default BudgetComparison;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport \"./styles.css\";\nimport { City } from \"../City\";\nimport imageData from \"../data/faces_data.json\";\nimport { Simulation, SimulationNodeDatum, BaseType, Selection } from \"d3\";\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nexport const PoliceToCivilianRatio: React.FC<{ selectedCity: City }> = ({\n  selectedCity,\n}) => {\n  const ratio =\n    (selectedCity?.police_dept_employee_to_resident_ratio as number) + 1; // extra 1 for the police officer node\n  const prevRatio = usePrevious(ratio);\n  const d3Container = useRef(null);\n  const [graphRendered, setGraphRendered] = useState(false);\n  const message = selectedCity\n    ? `There's one police officer for every ${ratio} people here`\n    : \"\";\n  const nodes = useRef<\n    Selection<BaseType, { image: string; diameter: number }, BaseType, unknown>\n  >();\n  const simulation = useRef<Simulation<SimulationNodeDatum, undefined>>();\n\n  const ticked = (nodes: any) => {\n    nodes\n      .attr(\"x\", (d: any) => (d as any).x)\n      .attr(\"y\", (d: any) => (d as any).y);\n  };\n\n  useEffect(() => {\n    if (ratio && d3Container.current && simulation.current && nodes.current) {\n      simulation.current\n        .nodes(imageData.slice(0, ratio) as any)\n        .alpha(1)\n        .restart();\n      const updateNodes = () => {\n        nodes.current = d3\n          .select(d3Container.current)\n          .select(\".graph-container\")\n          .selectAll(\"image\")\n          .data(imageData.slice(0, ratio));\n\n        if (prevRatio !== undefined && !isNaN(prevRatio)) {\n          if (ratio > prevRatio) {\n            nodes.current\n              .enter()\n              .append(\"image\")\n              .attr(\"height\", 0)\n              .attr(\"width\", 0)\n              .attr(\"transform\", \"translate(500, 800)\")\n              .transition()\n              .attr(\"href\", (d) => (d as any).image)\n              .attr(\"x\", (d) => (d as any).x)\n              .attr(\"y\", (d) => (d as any).y)\n              .attr(\"height\", 50)\n              .attr(\"width\", 50);\n          } else if (ratio < prevRatio) {\n            nodes.current\n              .exit()\n              .transition()\n              .attr(\"height\", (d) => 0)\n              .attr(\"width\", (d) => 0)\n              .remove();\n          }\n        }\n\n        simulation.current\n          ?.nodes(imageData.slice(0, ratio) as any)\n          .alpha(1)\n          .restart();\n      };\n\n      updateNodes();\n      updateNodes();\n    }\n  }, [ratio, prevRatio, simulation, nodes]);\n\n  const initialGraph = () => {\n    nodes.current = d3\n      .select(d3Container.current)\n      .select(\".graph-container\")\n      .selectAll(\"image\")\n      .data(imageData.slice(0, ratio));\n\n    nodes.current\n      .enter()\n      .append(\"image\")\n      .attr(\"href\", (d) => (d as any).image)\n      .attr(\"x\", (d) => (d as any).x)\n      .attr(\"y\", (d) => (d as any).y)\n      .attr(\"height\", 50)\n      .attr(\"width\", 50)\n      .attr(\"transform\", \"translate(500, 800)\");\n\n    simulation.current = d3\n      .forceSimulation(imageData.slice(0, ratio) as any)\n      .velocityDecay(0.1)\n      .alphaDecay(0.1)\n      .alpha(0.4)\n      .force(\"x\", d3.forceX().strength(0.02))\n      .force(\"y\", d3.forceY().strength(0.02))\n      .force(\n        \"collision\",\n        d3\n          .forceCollide()\n          .radius((d) => (d as any).diameter + 0.5)\n          .iterations(2)\n          .strength(0.5)\n      )\n      .on(\"tick\", () => ticked(nodes.current));\n\n    const drag = d3\n      .drag()\n      .on(\"start\", (event: any) => {\n        simulation.current?.alpha(0.4).restart();\n      })\n      .on(\"drag\", function (this: any, event: DragEvent, d: any) {\n        simulation.current?.alpha(0.4).restart();\n        d3.select(this)\n          .attr(\"x\", (d.x = event.x))\n          .attr(\"y\", (d.y = event.y))\n          .style(\"cursor\", \"grabbing\");\n      })\n      .on(\"end\", function (this: any, event: any, d: any) {\n        d3.select(this).style(\"cursor\", \"grab\");\n      });\n\n    d3.select(d3Container.current)\n      .select('[href=\"/policing_cost_vis/officer-large.png\"]')\n      .attr(\"height\", 200)\n      .attr(\"width\", 200)\n      .attr(\"transform\", \"translate(425, 725)\")\n      .style(\"cursor\", \"grab\")\n      .call(drag as any);\n  };\n\n  if (!graphRendered && selectedCity) {\n    initialGraph();\n    setGraphRendered(true);\n  }\n\n  return (\n    <div\n      className={\n        selectedCity\n          ? \"police-to-civilian-ratio selected\"\n          : \"police-to-civilian-ratio\"\n      }\n      id=\"police-to-civilian-ratio\"\n      ref={d3Container}\n    >\n      {selectedCity && <p className=\"message\">{message}</p>}\n      <svg\n        preserveAspectRatio=\"xMidYMin meet\"\n        // if you change the viewbox size, you have to change\n        // the strength of collision and force x and y on the simulation too\n        viewBox=\"-400 -200 2000 2000\"\n        className=\"graph-container\"\n      ></svg>\n    </div>\n  );\n};\n\nexport default PoliceToCivilianRatio;\n","import React from \"react\";\nimport \"./styles.css\";\nimport { City } from \"../City\";\nimport { useMediaQuery } from \"beautiful-react-hooks\";\n\nexport const BudgetPerCapita: React.FC<{ selectedCity: City }> = ({\n  selectedCity,\n}) => {\n  const isSmallScreen = useMediaQuery(\"(max-width: 1200px)\");\n\n  if (!selectedCity) {\n    return <div className=\"budget-per-capita\">hello</div>;\n  }\n\n  const budgetPerCapita = selectedCity.policing_budget_per_capita;\n  const budgetMessage = `Every taxpayer ${\n    isSmallScreen ? \" in \" + selectedCity.City : \"here\"\n  } spent $${budgetPerCapita} on policing in 2019, or about this much`;\n\n  const addHundredDollarBills = () => {\n    const numberOfBills = Math.round(budgetPerCapita / 100);\n    return Array.from({ length: numberOfBills }, (v, k) => k + 1).map((n) => (\n      <img\n        className=\"hundred\"\n        key={n}\n        alt=\"hundred-dollars\"\n        src=\"/policing_cost_vis/hundred.jpeg\"\n      ></img>\n    ));\n  };\n\n  return (\n    <div className=\"budget-per-capita\">\n      <p className=\"budget-message\">{budgetMessage}</p>\n      {addHundredDollarBills()}\n    </div>\n  );\n};\n\nexport default BudgetPerCapita;\n","import React, { useState, useCallback } from \"react\";\nimport \"./App.css\";\nimport Map from \"./Map/Map.js\";\nimport BudgetComparison from \"./BudgetComparison/BudgetComparison\";\nimport PoliceToCivilianRatio from \"./PoliceToCivilianRatio/PoliceToCivilianRatio\";\nimport BudgetPerCapita from \"./BudgetPerCapita/BudgetPerCapita\";\nimport { City } from \"./City\";\nimport { useMediaQuery } from \"beautiful-react-hooks\";\n\nexport const App: React.FC = () => {\n  const isSmallScreen = useMediaQuery(\"(max-width: 1200px)\");\n  const [selectedCity, setSelectedCity] = useState<City>(null);\n  const onMouseover = useCallback((newCity: City) => {\n    setSelectedCity(newCity);\n  }, []);\n  const locationName = selectedCity\n    ? selectedCity?.City + \", \" + selectedCity?.State\n    : \"Choose a city\";\n\n  return (\n    <div className=\"App\">\n      <div className=\"title\">\n        <img\n          className=\"title-image\"\n          alt=\"title with people mosaic\"\n          src=\"/policing_cost_vis/title-image.png\"\n        />\n        <div className=\"title-card\">\n          <img\n            className=\"officer\"\n            alt=\"police officer icon\"\n            src=\"/policing_cost_vis/officer-large.png\"\n          ></img>\n          <h1 className=\"title-text\">The Cost of Policing in America</h1>\n        </div>\n      </div>\n      <p className=\"explanation first\">\n        This is an interactive exploration of how various cities in the U.S.\n        fund their local police forces. The data behind it was compiled by the{\" \"}\n        <a href=\"https://www.vera.org/publications/what-policing-costs-in-americas-biggest-cities\">\n          Vera Institute of Justice\n        </a>\n        , which gathered it from datasets made public by each city's government.\n      </p>\n      <p className=\"explanation second\">\n        With the exception of the policeman, which is a stock image, none of the\n        photos shown in this visualization are of real people. They were\n        generated using{\" \"}\n        <a href=\"https://thispersondoesnotexist.com\">\n          thispersondoesnotexist.com\n        </a>\n        . This has the advantage of not requiring consent to show anyone's\n        image, but the disadvantage of not being trained on a racially diverse\n        dataset.\n      </p>\n      <div className=\"visualization\">\n        <h1 className=\"location\">{locationName}</h1>\n        <div className=\"vis-body\">\n          <div className={selectedCity ? \"left-side selected\" : \"left-side\"}>\n            <div className={selectedCity ? \"top-row selected\" : \"top-row\"}>\n              <BudgetComparison selectedCity={selectedCity} />\n              <BudgetPerCapita selectedCity={selectedCity} />\n            </div>\n            {isSmallScreen && selectedCity !== null && (\n              <h1 className=\"cta-reclick\">Now choose another city</h1>\n            )}\n            <Map onMouseover={onMouseover} selectedCity={selectedCity} />\n          </div>\n          <PoliceToCivilianRatio selectedCity={selectedCity} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}