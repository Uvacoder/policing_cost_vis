{"version":3,"sources":["Map/Map.js","BudgetComparison/BudgetComparison.tsx","PoliceToCivilianRatio/PoliceToCivilianRatio.tsx","BudgetPerCapita/BudgetPerCapita.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Map","onMouseover","selectedCity","d3Container","useRef","useEffect","svgContainer","d3","current","select","path","append","attr","topojson","statesOutline","objects","states","style","nodes","selectAll","data","citiesData","enter","d","Index","toString","cx","cy","on","i","this","classList","contains","cityNames","labelx","labely","text","City","className","ref","preserveAspectRatio","viewBox","height","width","BudgetComparison","numberWithCommas","n","replace","policingBudget","overall_policing_budget","percentPolicingBudget","percent_city_funds_spent_on_policing","totalBudget","otherBudget","Math","round","policingBudgetString","otherBudgetString","budgetToPixels","domain","range","curvyArrowHeight","arrowHeight","x","y","curvyArrowWidth","PoliceToCivilianRatio","ratio","police_dept_employee_to_resident_ratio","prevRatio","value","usePrevious","useState","graphRendered","setGraphRendered","message","simulation","imageData","slice","alpha","restart","updateNodes","undefined","isNaN","transition","image","exit","remove","velocityDecay","alphaDecay","force","strength","radius","diameter","iterations","ticked","drag","event","call","initialGraph","id","BudgetPerCapita","budgetPerCapita","policing_budget_per_capita","budgetMessage","numberOfBills","Array","from","length","v","k","map","key","alt","src","addHundredDollarBills","App","setSelectedCity","useCallback","newCity","locationName","State","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.813215d8.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport \"./styles.css\";\nimport citiesData from \"../data/us_cities_with_FID.json\";\nimport statesOutline from \"../data/states_outline.json\";\n\n// Had to slightly change long/lat manually for some cities so they wouldn't overlap.\n// Here are the original long/lat for those cities:\n// - Fort Worth longitude: -97.4294026\n// - Dallas longitude: -96.8716261\n// - Newark latitude: 40.7313432\n// - New York latitutde 40.6976637\n// - New York longitude -74.1197639\n\nconst Map = ({ onMouseover, selectedCity }) => {\n  const d3Container = useRef(null);\n\n  useEffect(() => {\n    const svgContainer = d3.select(d3Container.current).select(\".svg-content\");\n    const path = d3.geoPath();\n\n    svgContainer\n      .append(\"path\")\n      .attr(\n        \"d\",\n        path(topojson.mesh(statesOutline, statesOutline.objects.states))\n      )\n      .style(\"stroke\", \"gray\")\n      .style(\"stroke-width\", 0.5)\n      .style(\"fill\", \"none\");\n\n    const nodes = svgContainer\n      .selectAll(\"circle\")\n      .data(citiesData)\n      .enter()\n      .append(\"circle\")\n      .attr(\"class\", (d) => \"circle-\" + d.Index.toString())\n      .attr(\"r\", 4)\n      .attr(\"cx\", (d) => d.cx)\n      .attr(\"cy\", (d) => d.cy)\n      .style(\"stroke\", \"#7df9ff\")\n      .style(\"fill\", \"#7df9ff\")\n      .on(\"mouseover\", function (d, i) {\n        if (!this.classList.contains(\"clicked\")) {\n          d3.select(this).style(\"stroke\", \"black\");\n          d3.select(d3Container.current)\n            .select(\".text-\" + i.Index.toString())\n            .style(\"font-weight\", \"bold\");\n        }\n      })\n      .on(\"mouseout\", function (d, i) {\n        if (!this.classList.contains(\"clicked\")) {\n          d3.select(this).style(\"stroke\", \"#7df9ff\");\n          d3.select(d3Container.current)\n            .select(\".text-\" + i.Index.toString())\n            .style(\"font-weight\", \"normal\");\n        }\n      })\n      .on(\"click\", function (d, i) {\n        nodes\n          .attr(\"class\", (d) => \"circle-\" + d.Index.toString())\n          .style(\"stroke\", \"#7df9ff\");\n        cityNames\n          .attr(\"class\", (d) => \"text-\" + d.Index.toString())\n          .style(\"font-weight\", \"normal\");\n        \n        d3.select(d3Container.current)\n          .select(\".text-\" + i.Index.toString())\n          .attr(\"class\", \"clicked\")\n          .style(\"font-weight\", \"bold\");\n        d3.select(this)\n          .attr(\"class\", \"clicked\")\n          .style(\"stroke\", \"black\");\n\n        onMouseover(i);\n      });\n\n    // Makes map labels draggable. \n    // Used this to determine new coordinates for labels relative to their nodes.\n    // let tempLabelCoordinates = {};\n    // const projection = d3.geoAlbersUsa().scale(1300).translate([487.5, 305]);\n    // const drag = d3.drag().on(\"drag\", function (event, d) {\n    //   const draggedLatLong = projection.invert([event.x, event.y]);\n    //   d3.select(this)\n    //     .attr(\"x\", (d.x = event.x))\n    //     .attr(\"y\", (d.y = event.y));\n    //   tempLabelCoordinates[d.City] = [draggedLatLong[1], draggedLatLong[0]];\n    //   console.log(JSON.stringify(tempLabelCoordinates))\n    // });\n\n    const cityNames = svgContainer\n      .selectAll(\"text\")\n      .data(citiesData)\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", (d) => \"text-\" + d.Index.toString())\n      .attr(\"x\", (d) => d.labelx + 3)\n      .attr(\"y\", (d) => d.labely - 3)\n      .text((d) => d.City)\n      .style(\"user-select\", \"none\")\n      .style(\"font\", \"14px arial\")\n      .style(\"cursor\", \"pointer\")\n      .on(\"mouseover\", function (d, i) {\n        if (!this.classList.contains(\"clicked\")) {\n          d3.select(this).style(\"font-weight\", \"bold\");\n          d3.select(d3Container.current)\n            .select(\".circle-\" + i.Index.toString())\n            .style(\"stroke\", \"black\");\n        }\n      })\n      .on(\"mouseout\", function (d, i) {\n        if (!this.classList.contains(\"clicked\")) {\n          d3.select(this).style(\"font-weight\", \"normal\");\n          d3.select(d3Container.current)\n            .select(\".circle-\" + i.Index.toString())\n            .style(\"stroke\", \"none\");\n        }\n      })\n      .on(\"click\", function (d, i) {\n        cityNames\n          .attr(\"class\", (d) => \"text-\" + d.Index.toString())\n          .style(\"font-weight\", \"normal\");\n        nodes\n          .attr(\"class\", d => \"circle-\" + d.Index.toString())\n          .style(\"stroke\", \"#7df9ff\");\n      \n        d3.select(d3Container.current)\n          .select(\".circle-\" + i.Index.toString())\n          .attr(\"class\", \"clicked\")\n          .style(\"stroke\", \"black\");\n        d3.select(this)\n          .attr(\"class\", \"clicked\")\n          .style(\"font-weight\", \"bold\");\n\n        onMouseover(i);\n      });\n\n    // .call(drag);\n  }, [onMouseover]);\n\n  return (\n    <div className={selectedCity ? \"map small-map\" : \"map\"} ref={d3Container}>\n      <svg\n        preserveAspectRatio=\"xMidYMid meet\"\n        viewBox=\"-70 -30 1100 650\"\n        className=\"svg-content\"\n        height=\"100%\"\n        width=\"100%\"\n      ></svg>\n    </div>\n  );\n};\nexport default Map;\n","import React from \"react\";\nimport * as d3 from \"d3\";\nimport \"./styles.css\";\nimport { City } from \"../City\";\n\nexport const BudgetComparison: React.FC<{ selectedCity: City }> = ({\n  selectedCity,\n}) => {\n  if (!selectedCity) {\n    return <div className=\"budget-comparison\"></div>;\n  }\n\n  const numberWithCommas = (n: number) => {\n    return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n  const policingBudget = selectedCity.overall_policing_budget;\n  const percentPolicingBudget = selectedCity.percent_city_funds_spent_on_policing;\n  const totalBudget = (policingBudget * 100) / percentPolicingBudget;\n  const otherBudget = Math.round(totalBudget - policingBudget);\n  const policingBudgetString = \"$\" + numberWithCommas(policingBudget);\n  const otherBudgetString = \"$\" + numberWithCommas(otherBudget);\n\n  const budgetToPixels = d3\n    .scaleLinear()\n    .domain([1, totalBudget])\n    .range([30, 150]); // values chosen so that text can fit comfortably inside both arrows\n\n  // keep this greater than 400px so the curve paths can still look good\n  const curvyArrowWidth = 800\n  const curvyArrowHeight = budgetToPixels(policingBudget)\n  const arrowWidth = 900\n  const arrowHeight = budgetToPixels(otherBudget)\n  const gapBetweenArrows = 0\n\n  const createPolicingBudgetArrow = () => {\n    const path =\n    // move to x = 0, y = below the Other budget arrow (+ 5 for spacing for now)\n    `M 0 ${arrowHeight + gapBetweenArrows}` +\n    // top horizontal line\n    ` H  ${curvyArrowWidth *0.6}` +\n    // top curve\n    ` C  ${curvyArrowWidth*0.9} ${arrowHeight + gapBetweenArrows}  \n         ${curvyArrowWidth*0.9} ${arrowHeight + 120}   \n         ${curvyArrowWidth*0.9} ${arrowHeight + 150}` +\n    // these two Ls are the arrow pointing part\n    ` L ${curvyArrowWidth*0.9 - curvyArrowHeight/2} ${arrowHeight + curvyArrowHeight/2 + 150}\n      L ${curvyArrowWidth*0.9 - curvyArrowHeight} ${arrowHeight + 150}` +\n    // bottom curve\n    ` C ${curvyArrowWidth*0.9 - curvyArrowHeight} ${arrowHeight + 120}\n        ${curvyArrowWidth*0.9 - curvyArrowHeight} ${arrowHeight + curvyArrowHeight + gapBetweenArrows}\n        ${curvyArrowWidth*0.6} ${arrowHeight + curvyArrowHeight + gapBetweenArrows}` +\n    // bottom horizontal line\n    ` H 0` +\n    // vertical line back to start of this polygon\n    ` V ${arrowHeight + gapBetweenArrows}`\n    return path\n  }\n\n  const createOtherBudgetArrow = () => {\n    const path = \n    // move to 0, 0\n    `M 0 0 ` + \n    // draw a horizontal line from (0, 0) to (0, arrowWidth)\n    `H ${arrowWidth} ` + \n    // these two lines draw the arrow's point\n    `L ${arrowWidth + arrowHeight/2} ${arrowHeight/2} \n     L ${arrowWidth} ${arrowHeight}` + \n    // draw a horizontal line to (0, arrowWidth)\n    ` H 0 V 0`\n    return path\n  }\n\n  return (\n    <div className=\"budget-comparison\">\n      {policingBudget && percentPolicingBudget && (\n        <svg viewBox=\"200 -150 600 600\" className=\"svg-arrows\">\n          <text \n            className=\"other-budget-text\" \n            x=\"0\" \n            y={arrowHeight*.5 + 20}>\n              {otherBudgetString}\n          </text> \n          <path\n            className=\"other-budget-arrow\"\n            d={createOtherBudgetArrow()}\n          ></path>\n          <text \n            className=\"policing-budget-text\" \n            x=\"0\" \n            y={arrowHeight + curvyArrowHeight*.5 + 15}>\n              {policingBudgetString}\n          </text>\n          <path\n            className=\"policing-budget-arrow\"\n            d={createPolicingBudgetArrow()}\n          ></path>\n        </svg>\n      )}\n    </div>\n  );\n};\n\nexport default BudgetComparison;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport \"./styles.css\";\nimport { City } from \"../City\";\nimport imageData from \"../data/faces_data.json\";\nimport { Simulation, SimulationNodeDatum, BaseType, Selection } from \"d3\";\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nexport const PoliceToCivilianRatio: React.FC<{ selectedCity: City }> = ({\n  selectedCity,\n}) => {\n  const ratio =\n    (selectedCity?.police_dept_employee_to_resident_ratio as number) + 1; // extra 1 for the police officer node\n  const prevRatio = usePrevious(ratio);\n  const d3Container = useRef(null);\n  const [graphRendered, setGraphRendered] = useState(false);\n  const message = selectedCity\n    ? `1 police officer for every ${ratio} people`\n    : \"\";\n  const nodes = useRef<\n    Selection<BaseType, { image: string; diameter: number }, BaseType, unknown>\n  >();\n  const simulation = useRef<Simulation<SimulationNodeDatum, undefined>>();\n  // const parent = document.getElementById(\"police-to-civilian-ratio\")\n  // const parentWidth = parent?.clientWidth as number// make sure this value changes when screen resizes. add resize event listener\n  // const parentHeight = parent?.clientHeight as number * 10\n  const ticked = (nodes: any) => {\n    nodes\n      .attr(\"x\", (d: any) => (d as any).x)  //[radius, width - radius] for x, [radius, height - radius] for y\n      .attr(\"y\", (d: any) => (d as any).y);\n      // .attr(\"x\", (d: any) => Math.max(d.diameter, Math.min(parentWidth - d.diameter, d.x)))\n      // .attr(\"y\", (d: any) => Math.max(d.diameter, Math.min(parentHeight - d.diameter, d.y)))\n  };\n\n  useEffect(() => {\n    if (ratio && d3Container.current && simulation.current && nodes.current) {\n      simulation.current\n        .nodes(imageData.slice(0, ratio) as any)\n        .alpha(1)\n        .restart();\n      const updateNodes = () => {\n        nodes.current = d3\n          .select(d3Container.current)\n          .select(\".graph-container\")\n          .selectAll(\"image\")\n          .data(imageData.slice(0, ratio));\n\n        if (prevRatio !== undefined && !isNaN(prevRatio)) {\n          if (ratio > prevRatio) {\n            nodes.current\n              .enter()\n              .append(\"image\")\n              .attr(\"height\", 0)\n              .attr(\"width\", 0)\n              .attr(\"transform\", \"translate(500, 800)\")\n              .transition()\n              .attr(\"href\", (d) => (d as any).image)\n              .attr(\"x\", (d) => (d as any).x)\n              .attr(\"y\", (d) => (d as any).y)\n              .attr(\"height\", 50)\n              .attr(\"width\", 50);\n          } else if (ratio < prevRatio) {\n            nodes.current\n              .exit()\n              .transition()\n              .attr(\"height\", (d) => 0)\n              .attr(\"width\", (d) => 0)\n              .remove();\n          }\n        }\n\n        simulation.current\n          ?.nodes(imageData.slice(0, ratio) as any)\n          .alpha(1)\n          .restart();\n      };\n\n      updateNodes();\n      updateNodes();\n    }\n  }, [ratio, prevRatio, simulation, nodes]);\n\n  const initialGraph = () => {\n    nodes.current = d3\n      .select(d3Container.current)\n      .select(\".graph-container\")\n      .selectAll(\"image\")\n      .data(imageData.slice(0, ratio));\n\n    nodes.current\n      .enter()\n      .append(\"image\")\n      .attr(\"href\", (d) => (d as any).image)\n      .attr(\"x\", (d) => (d as any).x)\n      .attr(\"y\", (d) => (d as any).y)\n      .attr(\"height\", 50)\n      .attr(\"width\", 50) // shouldn't it have to do with diameter too?\n      .attr(\"transform\", \"translate(500, 800)\");\n\n    simulation.current = d3\n      .forceSimulation(imageData.slice(0, ratio) as any)\n      .velocityDecay(0.1)\n      .alphaDecay(0.1)\n      .alpha(1)\n      .force(\"x\", d3.forceX().strength(0.01))\n      .force(\"y\", d3.forceY().strength(0.06))\n      .force(\n        \"collision\",\n        d3\n          .forceCollide()\n          .radius((d) => (d as any).diameter + 0.5)\n          .iterations(2)\n          .strength(0.5)\n      )\n      .on(\"tick\", () => ticked(nodes.current));\n\n    const drag = d3\n      .drag()\n      .on(\"start\", (event: any) => {\n        // if (simulation.current) {\n          simulation.current?.alpha(0.4).restart();\n        // }\n      })\n      .on(\"drag\", function (this: any, event: DragEvent, d: any) {\n        // if (simulation.current) {\n\n          simulation.current?.alpha(0.4).restart();\n        // }\n        d3.select(this)\n          .attr(\"x\", (d.x = event.x))\n          .attr(\"y\", (d.y = event.y))\n          .style(\"cursor\", \"grabbing\");\n      })\n      .on(\"end\", function (this: any, event: any, d: any) {\n        d3.select(this).style(\"cursor\", \"grab\")\n      });\n\n    d3.select(d3Container.current)\n      .select('[href=\"policing_cost_vis/citizen_photos/officer.png\"]')\n      .attr(\"height\", 200)\n      .attr(\"width\", 200)\n      .attr(\"transform\", \"translate(425, 725)\")\n      .style(\"cursor\", \"grab\")\n      .call(drag as any);\n  };\n\n  if (!graphRendered && selectedCity) {\n    initialGraph();\n    setGraphRendered(true);\n  }\n\n  return (\n    <div className=\"police-to-civilian-ratio\" id=\"police-to-civilian-ratio\" ref={d3Container}>\n      {selectedCity && <p className=\"message\">{message}</p>}\n      <svg\n        preserveAspectRatio=\"xMidYMin meet\"\n        // if you change the viewbox size, you have to change the strength of collision and force x and y on the simulation too\n        viewBox=\"-100 100 850 850\" \n        className=\"graph-container\"\n      ></svg>\n    </div>\n  );\n};\n\nexport default PoliceToCivilianRatio;\n","import React from \"react\";\nimport \"./styles.css\";\nimport { City } from \"../City\";\n\nexport const BudgetPerCapita: React.FC<{ selectedCity: City }> = ({\n  selectedCity,\n}) => {\n  if (!selectedCity) {\n    return <div className=\"budget-per-capita\">hello</div>;\n  }\n\n  const budgetPerCapita = selectedCity.policing_budget_per_capita;\n  const budgetMessage = `Every taxpayer who lives here spent $${budgetPerCapita} on policing in 2019`;\n\n  const addHundredDollarBills = () => {\n    const numberOfBills = Math.round(budgetPerCapita / 100);\n    return Array.from({ length: numberOfBills }, (v, k) => k + 1).map((n) => (\n      <img\n        className=\"hundred\"\n        key={n}\n        alt=\"hundred-dollars\"\n        src=\"policing_cost_vis/hundred.jpeg\"\n      ></img>\n    ));\n  };\n\n  return (\n    <div className=\"budget-per-capita\">\n      <p>{budgetMessage}</p>\n      {addHundredDollarBills()}\n    </div>\n  );\n};\n\nexport default BudgetPerCapita;\n","import React, { useState, useCallback } from \"react\";\nimport \"./App.css\";\nimport Map from \"./Map/Map.js\";\nimport BudgetComparison from \"./BudgetComparison/BudgetComparison\";\nimport PoliceToCivilianRatio from \"./PoliceToCivilianRatio/PoliceToCivilianRatio\";\nimport BudgetPerCapita from \"./BudgetPerCapita/BudgetPerCapita\";\nimport { City } from \"./City\";\n\nexport const App: React.FC = () => {\n  // remember to do css for mobile\n\n  const [selectedCity, setSelectedCity] = useState<City>(null);\n  const onMouseover = useCallback((newCity: City) => {\n    setSelectedCity(newCity);\n  }, []);\n  const locationName = selectedCity\n    ? selectedCity?.City + \", \" + selectedCity?.State\n    : \"Map of the States\";\n\n  return (\n    <div className=\"App\">\n      <div className=\"title\">\n        <img\n          className=\"title-image\"\n          alt=\"title with people mosaic\"\n          src=\"/policing_cost_vis/title-image.png\"\n        />\n        <div className=\"title-card\">\n          <img\n            className=\"officer\"\n            alt=\"police officer icon\"\n            src=\"/policing_cost_vis/officer-large.png\"\n          ></img>\n          <h1 className=\"title-text\">The Cost of Policing in America</h1>\n        </div>\n      </div>\n      <p className=\"explanation\">\n        This is an interactive exploration of how various cities in the U.S.\n        fund their local police forces. The data behind it was compiled by\n        the&nbsp;\n        <a href=\"https://www.vera.org/publications/what-policing-costs-in-americas-biggest-cities\">\n          Vera Institute of Justice\n        </a>\n        , which gathered it from datasets made public by each city's government.\n        <br />\n        <br />\n        With the exception of the policeman, which is a stock image, none of the\n        photos shown in this visualization are of real people. They were\n        generated using&nbsp;\n        <a href=\"https://thispersondoesnotexist.com\">\n          thispersondoesnotexist.com\n        </a>\n        .&nbsp;The advantage here is that no one's consent is required, but the\n        disadvantage is that this particular model was not trained on a very\n        racially diverse dataset.\n      </p>\n      <div className=\"visualization\">\n        <h1 className={selectedCity ? \"location selected\" : \"location\"}>\n          {locationName}\n        </h1>\n        <div className=\"vis-body\">\n          <div className={selectedCity ? \"top-row selected\" : \"top-row\"}>\n            <BudgetComparison selectedCity={selectedCity} />\n            <BudgetPerCapita selectedCity={selectedCity} />\n            <PoliceToCivilianRatio selectedCity={selectedCity} />\n          </div>\n          <Map onMouseover={onMouseover} selectedCity={selectedCity} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}