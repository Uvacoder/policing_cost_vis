{"version":3,"sources":["Map.js","BudgetComparison.tsx","PoliceToCivilianRatio/PoliceToCivilianRatio.tsx","BudgetPerCapita.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Map","onMouseover","d3Container","useRef","useEffect","svgContainer","d3","current","append","attr","style","classed","path","topojson","statesOutline","objects","states","u","selectAll","data","citiesData","enter","d","cx","cy","on","i","this","cityNames","labelx","labely","text","City","className","ref","BudgetComparison","selectedCity","policingBudget","overall_policing_budget","percentPolicingBudget","percent_city_funds_spent_on_policing","totalBudget","otherBudget","budgetToPixels","domain","range","width","PoliceToCivilianRatio","ratio","police_dept_employee_to_resident_ratio","prevRatio","value","usePrevious","useState","graphRendered","setGraphRendered","simulation","nodes","ticked","x","y","imageData","slice","transition","image","exit","remove","alphaTarget","restart","velocityDecay","force","strength","radius","diameter","iterations","select","drag","event","active","call","initialGraph","preserveAspectRatio","viewBox","BudgetPerCapita","budgetPerCapita","policing_budget_per_capita","budgetMessage","numberOfBills","Math","round","Array","from","length","v","k","map","n","key","alt","src","addHundredDollarBills","App","setSelectedCity","useCallback","newCity","locationName","State","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fb84468f.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport \"./App.css\";\nimport citiesData from \"./data/us_cities_with_FID.json\";\nimport statesOutline from \"./data/states_outline.json\";\n\n// Had to slightly change long/lat manually for some cities so they wouldn't overlap.\n// Here are the original long/lat for those cities:\n// - Fort Worth longitude: -97.4294026\n// - Dallas longitude: -96.8716261\n// - Newark latitude: 40.7313432\n// - New York latitutde 40.6976637\n// - New York longitude -74.1197639\n\nconst Map = ({ onMouseover }) => {\n  const d3Container = useRef(null);\n\n  useEffect(() => {\n    const svgContainer = d3\n      .select(d3Container.current)\n      .append(\"svg\")\n      .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n      .attr(\"viewBox\", \"-62 70 1100 500\")\n      .style(\"width\", \"100%\")\n      .style(\"border\", \"1px solid red\")\n      .classed(\"svg-content\", true);\n\n    const path = d3.geoPath();\n\n    svgContainer\n      .append(\"path\")\n      .attr(\n        \"d\",\n        path(topojson.mesh(statesOutline, statesOutline.objects.states))\n      )\n      .style(\"stroke\", \"black\")\n      .style(\"stroke-width\", 0.5)\n      .style(\"fill\", \"none\");\n\n    const u = svgContainer\n      .selectAll(\"circle\")\n      .data(citiesData)\n      .enter()\n      .append(\"circle\")\n      .attr(\"r\", 4)\n      .attr(\"cx\", (d) => d.cx)\n      .attr(\"cy\", (d) => d.cy)\n      .style(\"stroke\", \"#7df9ff\") // electric blue\n      .style(\"fill\", \"#7df9ff\")\n      .style(\"cursor\", \"pointer\")\n      .on(\"click\", function (d, i) {\n        u.style(\"stroke\", \"#7df9ff\").style(\"fill\", \"#7df9ff\");\n        d3.select(this)\n          .style(\"fill\", \"#ff837d\") // complimentary to electric blue. see if colorblind safe\n          .style(\"stroke\", \"#ff837d\");\n        onMouseover(i);\n      });\n\n    // let tempLabelCoordinates = {};\n    // const projection = d3.geoAlbersUsa().scale(1300).translate([487.5, 305]);\n    // const drag = d3.drag().on(\"drag\", function (event, d) {\n    //   const draggedLatLong = projection.invert([event.x, event.y]);\n    //   d3.select(this)\n    //     .attr(\"x\", (d.x = event.x))\n    //     .attr(\"y\", (d.y = event.y));\n    //   tempLabelCoordinates[d.City] = [draggedLatLong[1], draggedLatLong[0]];\n    //   console.log(JSON.stringify(tempLabelCoordinates))\n    // });\n\n    const cityNames = svgContainer\n      .selectAll(\"text\")\n      .data(citiesData)\n      .enter()\n      .append(\"text\")\n      .attr(\"x\", (d) => d.labelx + 3)\n      .attr(\"y\", (d) => d.labely - 3)\n      .attr(\"onmouseover\", \"\")\n      .text((d) => d.City)\n      .style(\"font\", \"14px arial\")\n      .style(\"cursor\", \"pointer\")\n      .on(\"click\", function (d, i) {\n        cityNames.style(\"font\", \"12px arial\").style(\"fill\", \"black\")\n\n        d3.select(this)\n        .style(\"font\", \"italic 40px serif\")\n        .style(\"fill\", \"red\")\n        onMouseover(i);\n      })\n      // .call(drag);\n  }, [onMouseover]);\n\n  return <div className=\"map\" ref={d3Container}></div>;\n};\n\nexport default Map;\n","import React from \"react\";\nimport * as d3 from \"d3\";\nimport \"./BudgetComparison.css\";\nimport { City } from \"./City\";\n\nexport const BudgetComparison: React.FC<{ selectedCity: City }> = ({\n  selectedCity,\n}) => {\n\n  if (!selectedCity) {\n    return <div className=\"budget-comparison\"></div>;\n  }\n\n  const policingBudget = selectedCity.overall_policing_budget;\n  const percentPolicingBudget =\n    selectedCity.percent_city_funds_spent_on_policing;\n  const totalBudget = (policingBudget * 100) / percentPolicingBudget;\n  const otherBudget = totalBudget - policingBudget;\n\n  const budgetToPixels = d3\n    .scaleLinear()\n    .domain([1, totalBudget])\n    .range([1, 500]);\n\n  return (\n    <div className=\"budget-comparison\">\n      {policingBudget && percentPolicingBudget && (\n        <>\n          <div\n            className=\"policing-budget\"\n            style={{ width: budgetToPixels(policingBudget) }}\n          ></div>\n          <div\n            className=\"other-budget\"\n            style={{ width: budgetToPixels(otherBudget) }}\n          ></div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default BudgetComparison;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n// import { forceCluster } from 'd3-force-cluster'\n// import { drag } from 'd3-drag'\nimport \"./styles.css\";\nimport { City } from \"../City\";\nimport imageData from \"../data/faces_data.json\";\nimport { Simulation, SimulationNodeDatum, BaseType, Selection } from \"d3\";\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nexport const PoliceToCivilianRatio: React.FC<{ selectedCity: City }> = ({\n  selectedCity,\n}) => {\n  const ratio =\n    (selectedCity?.police_dept_employee_to_resident_ratio as number) + 1; // extra 1 for the police officer node\n  const prevRatio = usePrevious(ratio);\n  const d3Container = useRef(null);\n  const [graphRendered, setGraphRendered] = useState(false);\n  const message = selectedCity\n    ? `1 police officer for every ${ratio} people`\n    : \"\";\n\n  const simulation = useRef<Simulation<SimulationNodeDatum, undefined>>();\n  const nodes = useRef<\n    Selection<BaseType, { image: string; diameter: number }, BaseType, unknown>\n  >();\n\n  const ticked = (nodes: any) => {\n    nodes\n      .attr(\"x\", (d: any) => (d as any).x)\n      .attr(\"y\", (d: any) => (d as any).y);\n  };\n\n  useEffect(() => {\n    if (\n      ratio &&\n      prevRatio &&\n      d3Container.current &&\n      simulation.current &&\n      nodes.current\n    ) {\n\n      nodes.current = d3\n        .select(\".graph-container\")\n        .selectAll(\"image\")\n        .data(imageData.slice(0, ratio));\n\n      if (ratio > prevRatio) {\n        nodes.current\n          .enter()\n          .append(\"image\")\n          .attr(\"height\", (d) => 0)\n          .attr(\"width\", (d) => 0)\n          .attr(\"transform\", \"translate(500, 800)\")\n          .transition()\n          .attr(\"href\", (d) => (d as any).image)\n          .attr(\"x\", (d) => (d as any).x)\n          .attr(\"y\", (d) => (d as any).y)\n          .attr(\"height\", 50)\n          .attr(\"width\", 50)\n\n      } else if (ratio < prevRatio) {\n        nodes.current\n          .exit()\n          .transition()\n          .attr(\"height\", (d) => 0)\n          .attr(\"width\", (d) => 0)\n          .remove();\n      }\n\n      simulation.current\n      .nodes(imageData.slice(0, ratio) as SimulationNodeDatum[]).alphaTarget(0.3).restart().on(\"tick\", () => ticked(nodes.current))\n\n      nodes.current = d3\n      .select(\".graph-container\")\n      .selectAll(\"image\")\n      .data(imageData.slice(0, ratio));\n\n    if (ratio > prevRatio) {\n      nodes.current\n        .enter()\n        .append(\"image\")\n        .attr(\"height\", (d) => 0)\n        .attr(\"width\", (d) => 0)\n        .attr(\"transform\", \"translate(500, 800)\")\n        .transition()\n        .attr(\"href\", (d) => (d as any).image)\n        .attr(\"x\", (d) => (d as any).x)\n        .attr(\"y\", (d) => (d as any).y)\n        .attr(\"height\", 50)\n        .attr(\"width\", 50)\n\n    } else if (ratio < prevRatio) {\n      nodes.current\n        .exit()\n        .transition()\n        .attr(\"height\", (d) => 0)\n        .attr(\"width\", (d) => 0)\n        .remove();\n    }\n\n    simulation.current = d3\n    .forceSimulation(imageData.slice(0, ratio) as any)\n    .alphaTarget(0.3)\n    .velocityDecay(0.1)\n    .force(\"x\", d3.forceX().strength(0.002))\n    .force(\"y\", d3.forceY().strength(0.002))\n    .force(\n      \"collision\",\n      d3\n        .forceCollide()\n        .radius((d) => (d as any).diameter + 0.5)\n        .iterations(2)\n    );\n\n    simulation.current\n    .nodes(imageData.slice(0, ratio) as SimulationNodeDatum[]).alphaTarget(0.3).restart().on(\"tick\", () => ticked(nodes.current))\n\n    }\n  }, [ratio, prevRatio, simulation, nodes]);\n\n  const initialGraph = () => {\n    nodes.current = d3\n      .select(d3Container.current)\n      .select(\".graph-container\")\n      .selectAll(\"image\")\n      .data(imageData.slice(0, ratio));\n\n    nodes.current\n      .enter()\n      .append(\"image\")\n      .attr(\"href\", (d) => (d as any).image)\n      .attr(\"x\", (d) => (d as any).x)\n      .attr(\"y\", (d) => (d as any).y)\n      .attr(\"height\", 50)\n      .attr(\"width\", 50)\n      .attr(\"transform\", \"translate(500, 800)\")\n\n    simulation.current = d3\n      .forceSimulation(imageData.slice(0, ratio) as any)\n      .alphaTarget(0.3)\n      .velocityDecay(0.1)\n      .force(\"x\", d3.forceX().strength(0.002))\n      .force(\"y\", d3.forceY().strength(0.002))\n      .force(\n        \"collision\",\n        d3\n          .forceCollide()\n          .radius((d) => (d as any).diameter + 0.5)\n          .iterations(2)\n      );\n\n    simulation.current.on(\"tick\", () => ticked(nodes.current));\n\n    const drag = d3\n      .drag()\n      .on(\"drag\", function (this: any, event: DragEvent, d: any) {\n        d3.select(this)\n          .attr(\"x\", (d.x = event.x))\n          .attr(\"y\", (d.y = event.y));\n      })\n      .on(\"start\", (event: any) => {\n        if (!event.active && simulation.current) {\n          simulation.current.alphaTarget(0.3).restart();\n        }\n      });\n\n    d3.select(d3Container.current)\n      .select('[href=\"citizen_photos/officer.png\"]')\n      .attr(\"height\", 200)\n      .attr(\"width\", 200)\n      .call(drag as any);\n  };\n\n  if (!graphRendered && selectedCity) {\n    initialGraph();\n    setGraphRendered(true);\n  }\n\n  return (\n    <div className=\"police-to-civilian-ratio\" ref={d3Container}>\n      <svg\n        preserveAspectRatio=\"xMidYMin meet\"\n        viewBox=\"0 0 1000 1000\"\n        className=\"graph-container\"\n      >\n      </svg>\n      {/* {selectedCity && <p className=\"message\">{message}</p> } */}\n    </div>\n  );\n};\n\nexport default PoliceToCivilianRatio;\n","import React from \"react\";\nimport \"./BudgetPerCapita.css\";\nimport { City } from \"./City\";\n\nexport const BudgetPerCapita: React.FC<{ selectedCity: City }> = ({\n  selectedCity,\n}) => {\n  if (!selectedCity) {\n    return <div className=\"budget-per-capita\">hello</div>;\n  }\n\n  const budgetPerCapita = selectedCity.policing_budget_per_capita;\n  const budgetMessage = `Every resident in this city spent $${budgetPerCapita} on policing in 2019`;\n\n  const addHundredDollarBills = () => {\n    const numberOfBills = Math.round(budgetPerCapita / 100);\n    return Array.from({ length: numberOfBills }, (v, k) => k + 1).map((n) => (\n      <img\n        className=\"hundred\"\n        key={n}\n        alt=\"hundred-dollars\"\n        src=\"hundred.jpeg\"\n      ></img>\n    ));\n  };\n\n  return (\n    <div className=\"budget-per-capita\">\n      <p>{budgetMessage}</p>\n      {addHundredDollarBills()}\n    </div>\n  );\n};\n\nexport default BudgetPerCapita;\n","import React, { useState, useCallback } from \"react\";\nimport \"./App.css\";\nimport Map from \"./Map.js\";\nimport BudgetComparison from \"./BudgetComparison\";\nimport PoliceToCivilianRatio from \"./PoliceToCivilianRatio/PoliceToCivilianRatio\";\nimport BudgetPerCapita from \"./BudgetPerCapita\";\nimport { City } from \"./City\";\n\nexport const App: React.FC = () => {\n  // remember to do css for mobile\n\n  const [selectedCity, setSelectedCity] = useState<City>(null);\n  const onMouseover = useCallback((newCity: City) => {\n    setSelectedCity(newCity);\n  }, []);\n  const locationName = selectedCity\n    ? selectedCity?.City + \", \" + selectedCity?.State\n    : \"Map of the States\";\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1>{locationName}</h1>\n      </div>\n      <div className=\"vis-body\">\n        <div className=\"left-column\">\n          <Map onMouseover={onMouseover} />\n          <BudgetComparison selectedCity={selectedCity} />\n        </div>\n        <div className=\"right-column\">\n          <BudgetPerCapita selectedCity={selectedCity} />\n          <PoliceToCivilianRatio selectedCity={selectedCity} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}